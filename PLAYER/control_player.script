-- funcs
local message_to_inter;
local refresh_movement_counter;
--
local function draw_line(from, to)
	msg.post("@render:", "draw_line", { start_point = from, end_point = to, color = vmath.vector4(0,0,0,0) })
end
local tile_size  = 32;
local move_players
local player_table = {"/player1", "/player2"}
--pprint(player_table)
local movement_check_table = {0,0};
local movement_check;
move_players = function(self)

	for i = 1, #player_table do
		local from = go.get_position(player_table[i])
		local to = vmath.vector3(from.x, from.y, from.z) + self.to
		local result = physics.raycast(from, to, { hash("pared"), hash("inter") }) -- <4>
		
		if result then
			draw_line(from, result.position) -- <5>
			if result.group == hash("inter") then
				message_to_inter(result.id)
				movement_check_table[i] = 1;
				msg.post("inter_factory#inter_factory", "chequeo_win");
			end
		else
			self.se_puede_mover = false;
			go.animate(player_table[i], "position", go.PLAYBACK_ONCE_FORWARD, to, go.EASING_INCUBIC, 0.125, 0,
			function()
				movement_check_table[i] = 1;
				msg.post("inter_factory#inter_factory", "chequeo_win");
				self.se_puede_mover = true;
			end)
			--print("B")
			draw_line(from, to) -- <6>
		end
	end
	self.to = vmath.vector3()
	movement_check(self);
	--msg.post("inter_factory#inter_factory", "chequeo_win");
end

movement_check = function(self)
	if movement_check_table[1] ~= 0 or  movement_check_table[2] ~= 0 then
		refresh_movement_counter(self, 1)
	end
	movement_check_table = {0,0}
end

message_to_inter = function(to)	
	msg.post(to, "+1")
end

refresh_movement_counter = function(self, cuanto)
	self.amount_of_movement = self.amount_of_movement + cuanto;
	label.set_text("/contador de movimientos#label", "cantidad de movimientos\nvalidos realizados: " .. self.amount_of_movement);
end


function init(self)
	--msg.post("", "acquire_input_focus")
	self.to = vmath.vector3()
	self.se_puede_mover = true;
	--
	self.amount_of_movement = 0;
	
	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("tomar_input") then
		--print(sender)
		msg.post("", "acquire_input_focus");
		--print("player tomando input");
	elseif message_id == hash("quitar_input") then
		msg.post("", "release_input_focus");
		--print("player quitando input");
	elseif message_id == hash("posiciones_iniciales") then
		go.set_position(message.pos[1], player_table[1])
		go.set_position(message.pos[2], player_table[2])
		--print(message.pos[1])
	elseif message_id == hash("nivel_ganado") then
		msg.post("", "release_input_focus");
	end
end

function on_input(self, action_id, action)
	if action.pressed and action_id == hash("left") and self.se_puede_mover then
		self.to.x = -tile_size;
		move_players(self);
	elseif action.pressed and action_id == hash("right") and self.se_puede_mover then
		self.to.x = tile_size;
		move_players(self);
	elseif action.pressed and action_id == hash("up") and self.se_puede_mover then
		self.to.y = tile_size;
		move_players(self);
	elseif action.pressed and action_id == hash("down") and self.se_puede_mover then
		self.to.y = -tile_size;
		move_players(self);
	elseif action.pressed and action_id == hash("restart") then
		self.amount_of_movement = 0;
		label.set_text("/contador de movimientos#label", "cantidad de movimientos\nvalidos realizados: " .. self.amount_of_movement);
		--
		msg.post("/MAPAS#tiles_scr", "restart_player");
	end
end
